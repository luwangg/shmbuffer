Quick and dirty shared memory ring buffer written to speed up OpenWebRX
by using this as an alternative to ncat.

Use:
shmwrite takes samples from stdin and writes them in a shared memory buffer.
shmread reads samples from there and writes them in stdout.

How it is actually used:
https://github.com/tejeez/openwebrx/commit/35836c84519244162a5dac373bf410509c933bdb


Why I wrote it:
1) I found the CPU use of ncat became significant when I wrote an experimental,
   faster DDC algorithm to use at high sampling rates.
2) Using a big enough memory buffer and some additional logic in OpenWebRX,
   it should be possible to allow listening to signals from a few seconds or
   a few minutes ago. (Would someone like to implement such a feature in
   OpenWebRX and its web UI?)
3) There seems to be bug in ncat.
   See https://github.com/simonyiszk/openwebrx/issues/42




This is just a quick hack indeed:
Most of the parameters are just written in the C code instead of using command
line arguments. This is quite easy to fix and I'll do it soon.
There's no real synchronization: when new data isn't available, shmread just
sleeps for 50 ms and checks again. This, however, seems to work well enough
and I don't really know how to do it better.
shmread doesn't check for buffer overflows, so something strange probably
happens if it's reading data too slowly.

Actually, shmwrite intentionally doesn't have any way to check whether all
shmread instances are ready to accept new data. In other words, shmwrite
never blocks. This makes the implementation simple but I also think it's
a better way to do in this application anyway, as buffer overflow is really
a sign of the system running out of CPU resources. Such a situation could be
handled simply by making shmread exit when it notices a buffer overflow,
effectively kicking random OpenWebRX users out when the server is overloaded.
I might try implement this if it seems necessary.



Btw, fixbitorder_shmwrite.c is there because I originally tested this with my
homebrew SDR receiver where I accidentally wired the bits of a parallel output
ADC in wrong order and decided to fix it in software.
